from aiogram import Dispatcher, types
from database import UserController
# from handlers import timer, registration
from config import MENU_TEXT, COLLECTION_ID_FOR_MESSAGE, REGISTATION_LINK
# from create_bot import bot
from keyboards import kb_main, kb_make_appointment
from aiogram import Bot
from config import TOKENS

async def start_command(message: types.Message):
    auth = await UserController.check_auth_user(message.from_user.id)
    bots = [Bot(token) for token in TOKENS]
    for bot in bots:
        bot_info = await bot.get_me()
    
    if (auth):
        await message.answer('–ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏–º—Å—è?üòö', reply_markup=kb_main)
        
    if not(auth):
        url_id = message.get_args()
        find_url_id = await UserController.find_url_id(url_id)
        
        print(REGISTATION_LINK, url_id)
        if REGISTATION_LINK == url_id:
            print('–í—Ö–æ–¥ –µ—Å—Ç—å - ', url_id)
            # return await registration.start_command(message)
        
        if find_url_id:
            user = { 'username': message.from_user.username, 'firstName': message.from_user.first_name, 'lastName': message.from_user.last_name, 'telegramId': message.from_user.id }
            updata_patient_is_url = await UserController.updata_patient_is_url(user, url_id)
            push_user_id_to_collection = await UserController.push_user_id_to_collection(url_id)
            
            if updata_patient_is_url and push_user_id_to_collection: 
                await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!', reply_markup=kb_main)
                find_collection_in_user = await UserController.check_on_collection(url_id, COLLECTION_ID_FOR_MESSAGE)
                # –¢–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if find_collection_in_user:
                    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç–±–æ—Ç –∑–∞–±–æ—Ç—ã Alma clinic üëã\n\n–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –∫–ª–∏–Ω–∏–∫–∏, —á—Ç–æ–±—ã –±—ã—Ç—å –±–ª–∏–∂–µ –∫ –∫–∞–∂–¥–æ–º—É –ø–∞—Ü–∏–µ–Ω—Ç—É ‚ù§Ô∏è\n\n–ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∫—Ä–∞—Å–æ—Ç–µ –Ω–∞—à–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ —Ö–æ—Ç–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ª–µ—á–µ–Ω–∏—è –∏ —Å–µ—Ä–≤–∏—Å –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏.\n–ê —Ç–∞–∫–∂–µ –º—ã —Ö–æ—Ç–∏–º —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∞–∫—Ü–∏—è–º–∏ ‚ù§Ô∏è')
                    await message.answer('–í –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏ –º—ã –¥–∞—Ä–∏–º –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ -\nüéÅ–±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ª–∞–∑–µ—Ä–Ω–æ–π —ç–ø–∏–ª—è—Ü–∏–∏ (–∑–æ–Ω–∞ –ø–æ–¥–º—ã—à–µ–∫)\n\n–ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–¥–∞—Ä–∫–∞ LetoAlma2023 (—Å–∫–∞–∂–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–ª–∏–Ω–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É)\n*–∞–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 31.08.2023\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–∫–µ¬ª ‚úÖ')
                else:
                    bots = [Bot(token) for token in TOKENS]
                    for bot in bots:
                        await bot.send_message(message.chat.id, f'–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç –∑–∞–±–æ—Ç—ã –∫–ª–∏–Ω–∏–∫–∏ <b>{bot_info.first_name}</b>üëã\n\n–Ø –±—É–¥—É –≤–∞—à–∏–º –≥–∏–¥–æ–º –ø–æ –∫–ª–∏–Ω–∏–∫–µü§ó', parse_mode="html")
                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                # await timer.scheduled_job('now')
            else: 
                await message.answer('–ü—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')

        else:    
            bots = [Bot(token) for token in TOKENS]
            for bot in bots:
                await bot.send_message(message.chat.id, f'–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç –∑–∞–±–æ—Ç—ã –∫–ª–∏–Ω–∏–∫–∏ <b>{bot_info.first_name}</b>üëã\n\n–Ø –±—É–¥—É –≤–∞—à–∏–º –≥–∏–¥–æ–º –ø–æ –∫–ª–∏–Ω–∏–∫–µ. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º!ü§ó', reply_markup=kb_make_appointment , parse_mode="html")
            # await bot.send_sticker(chat_id=message.from_user.id, sticker=r"CAACAgIAAxkBAAEJRl9khLELI79VGUQdcVIr8hMS-nLDRgACWAQAAsxUSQk3DsXJLeC4fC8E")
    await message.delete()
    
async def main_command(message: types.Message):
    auth = await UserController.check_auth_user(message.from_user.id)
    if auth: await message.answer(MENU_TEXT, reply_markup=kb_main)
    else: await message.answer('–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã')
    await message.delete()


async def help_command(message: types.Message):
    await message.answer(text='<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n</b>/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n/main - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', parse_mode='html')
    await message.delete()


def register_handlers_start(dp: Dispatcher):
    dp.message.register(start_command, commands=["start"])
    dp.message.register(main_command, commands=["main"])
    dp.message.register(help_command, commands=['help'])
